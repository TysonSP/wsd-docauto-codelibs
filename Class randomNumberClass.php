<?php

//usage: $random = new randomNumberClass();

class randomNumberClass {

	var $seed, $random, $roundTo, $roundNumbers;

	function __construct() {
	
		$this->random = wsd_getNewRandom();
		$this->roundNumbers = false;
	  
	}
	
	function setRounding($decimals) {
	
		if(!is_numeric($decimals) || is_float($decimals))
			trigger_error('randomNumberClass: setRounding requires number as argument ($decimals: ' . $decimals . ')', E_USER_ERROR);
	
		$this->roundNumbers = true;
		$this->roundTo = $decimals;
	
	}
	
	function setSeed($seed) {
	
		$this->seed = $seed;
	
		$this->random->setSeed($this->seed);
	
	}
	
	function countDecimals($number) {
	
		$number = wsd_decimal_format($number, ',##0.################'); 
		
		$tempd = explode(".", $number);
		
		$decimals = strlen($tempd[1]);
		
		return $decimals;
	}
	
	function rand($value1, $value2) {
	
		if($value1 == $value2)
			trigger_error('randomNumberClass: Lower end and upper end must not be the same number (value1: ' . $value1 . '; value2: ' . $value1 . ')', E_USER_ERROR);
			
		if(!is_numeric($value1) || !is_numeric($value2))
			trigger_error('randomNumberClass: Lower end and upper end need to be numbers (value1: ' . $value1 . '; value2: ' . $value1 . ')', E_USER_ERROR);
			
		if($value1 < 0 || $value2 < 0)
			trigger_error('randomNumberClass: Lower end and upper end need to be positive numbers (value1: ' . $value1 . '; value2: ' . $value1 . ')', E_USER_ERROR);
	
		if($value1 < $value2) {
			$lowerEnd = $value1;
			$upperEnd = $value2;
		} else {
			$lowerEnd = $value2;
			$upperEnd = $value1;
		}
		
		$modifier = 1;
			
		if(is_float($lowerEnd) || is_float($upperEnd)) {
		
			$float = true;
			
			$decimalPlaces = max(array($this->countDecimals($lowerEnd), $this->countDecimals($upperEnd)));
			
			$modifier = intval('1' . str_repeat('0', $decimalPlaces));
		}		

		switch($float) {	
		
			case true:
				$difference = $upperEnd * $modifier - $lowerEnd * $modifier; 
				$randomNumber = $lowerEnd + ($this->random->nextInt($difference) / $modifier);
			break;
			
			case false:
				$difference = $upperEnd - $lowerEnd + 1; // add one, because the number generated by nextInt() is excluding the number supplied in the argument
				$randomNumber = $lowerEnd + $this->random->nextInt($difference);
			break;
		
		}
		
		if($this->roundNumbers)
			$randomNumber = round($randomNumber, $this->roundTo);
		
		if($randomNumber > $upperEnd || $randomNumber < $lowerEnd)
			trigger_error('randomNumberClass: error while calculating random number (randomNumber: ' . $randomNumber . '; lowerEnd: ' . $lowerEnd . '; upperEnd: ' . $upperEnd . ')', E_USER_ERROR);
		
		return $randomNumber;
	
	}

}

?>